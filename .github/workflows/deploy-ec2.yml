name: Deploy to EC2

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:  # También se puede ejecutar manualmente

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 180s
          command_timeout: 20m
          script_stop: true
          debug: true
          script: |
            cd ~/app
            
            # Asegurarse de que Docker está instalado
            if ! command -v docker &> /dev/null; then
              echo "Docker no está instalado. Instalando..."
              sudo apt-get update
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              sudo add-apt-repository "deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
              sudo usermod -aG docker $USER
              sudo systemctl start docker
              sudo systemctl enable docker
            fi
            
            # Verificar que docker compose funciona
            if ! sudo docker compose version &> /dev/null; then
              echo "Docker Compose no está funcionando correctamente. Instalando plugin..."
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
            fi
            
            # Mostrar versiones instaladas
            sudo docker --version
            sudo docker compose version
            
            # Forzar eliminación de contenedores e imágenes
            sudo docker compose down || true
            sudo docker rm -f app auth-db || true
            sudo docker rmi -f danisonediel/auth-login-signup-service:latest || true
            
            # Forzar pull de la imagen más reciente
            sudo docker pull danisonediel/auth-login-signup-service:latest
            
            # Crear .env file con secretos
            cat > .env << EOL
            MESSAGE_BROKER_URL=${{ secrets.MESSAGE_BROKER_URL || 'kafka:9092' }}
            JWT_SECRET=${{ secrets.JWT_SECRET || 'generate-a-secure-random-key-for-production' }}
            DATABASE_URL=${{ secrets.DATABASE_URL || 'postgresql://postgres:Uzumymw260916_@auth-db.cjmeisumz0yg.us-east-1.rds.amazonaws.com:5432/auth_db' }}
            EOL
            
            # Crear o actualizar docker-compose.yml
            cat > docker-compose.yml << EOL
            version: "3.8"
            
            services:
              app:
                image: danisonediel/auth-login-signup-service:latest
                container_name: app
                restart: always
                ports:
                  - "8000:8000"
                env_file:
                  - .env
                networks:
                  - auth-network
              
              postgres:
                image: postgres:14
                container_name: auth-db
                restart: always
                environment:
                  POSTGRES_DB: auth_db
                  POSTGRES_USER: postgres
                  POSTGRES_PASSWORD: Uzumymw260916_
                ports:
                  - "5432:5432"
                volumes:
                  - postgres-data:/var/lib/postgresql/data
                networks:
                  - auth-network
            
            volumes:
              postgres-data:
            
            networks:
              auth-network:
                name: auth-network
            EOL
            
            # Crear red si no existe
            sudo docker network inspect auth-network >/dev/null 2>&1 || sudo docker network create auth-network
            
            # Iniciar servicios con recreación forzada
            sudo docker compose up -d --force-recreate
            
            # Mostrar contenedores en ejecución
            sudo docker ps
